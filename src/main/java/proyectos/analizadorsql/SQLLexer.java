// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: OneDrive/Documentos/NetBeansProjects/AnalizadorSQL/lexico.flex

package proyectos.analizadorsql;

// Secci√≥n de imports
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


@SuppressWarnings("fallthrough")
class SQLLexer {

  public static final int YYEOF = -1;
  private static final int ZZ_BUFFERSIZE = 16384;
  public static final int YYINITIAL = 0;
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  
    public static final int KEYWORD = 0;
    public static final int IDENTIFIER = 1;
    public static final int NUMBER = 2;
    public static final int STRING = 3;
    public static final int OPERATOR = 4;
    public static final int WHITESPACE = 5;


  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\6\0"+
    "\1\4\2\5\2\6\1\5\1\7\1\10\1\6\12\11"+
    "\1\0\1\5\1\12\1\13\1\12\2\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\5\0"+
    "\1\45\1\0\32\46\12\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\25\1\1\7\1\0\1\10\1\0\1\11\1\0\1\6"+
    "\3\0\1\12\3\0\1\12\23\0\1\13\16\0\1\14"+
    "\1\0\1\13\1\15\43\0\1\7\12\0\1\16\11\0"+
    "\1\17\35\0\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\47\0\47\0\234\0\303"+
    "\0\352\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b"+
    "\0\47\0\u0492\0\u04b9\0\u04e0\0\47\0\u0507\0\u052e\0\u0555"+
    "\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\47\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e"+
    "\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6"+
    "\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u04e0"+
    "\0\u0b46\0\47\0\47\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u057c\0\u0ccc\0\u0cf3\0\u0d1a"+
    "\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\47\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b"+
    "\0\u1332\0\u1359\0\u1380\0\47\0\u13a7\0\u13ce\0\u13f5\0\u141c"+
    "\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554"+
    "\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  private static final int [] ZZ_TRANS = zzUnpacktrans();
  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\5"+
    "\1\10\1\11\1\5\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\2\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\2\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\3\2\1\37\50\0\2\3\44\0\4\40"+
    "\1\41\4\40\1\42\35\40\7\0\1\43\47\0\1\44"+
    "\1\10\50\0\1\45\52\0\1\46\7\0\1\47\1\0"+
    "\1\50\4\0\1\51\2\0\1\52\31\0\1\53\5\0"+
    "\1\54\11\0\1\55\16\0\1\56\15\0\1\57\2\0"+
    "\1\60\25\0\1\61\3\0\1\62\14\0\1\63\54\0"+
    "\1\64\17\0\1\65\15\0\1\66\2\0\1\67\46\0"+
    "\1\70\32\0\1\55\7\0\1\71\47\0\1\72\34\0"+
    "\1\73\52\0\1\74\36\0\1\75\7\0\1\76\54\0"+
    "\1\77\5\0\1\100\37\0\1\55\3\0\1\101\46\0"+
    "\1\102\31\0\1\103\46\0\1\104\17\0\1\105\22\0"+
    "\1\106\3\0\1\107\14\0\1\110\6\0\1\111\33\0"+
    "\1\112\1\0\1\113\27\0\1\114\55\0\1\115\70\0"+
    "\1\116\1\37\4\40\1\41\46\40\1\41\4\40\1\117"+
    "\35\40\2\43\1\0\1\43\1\0\42\43\11\0\1\120"+
    "\54\0\1\55\66\0\1\121\26\0\1\122\45\0\1\55"+
    "\52\0\1\123\46\0\1\124\56\0\1\125\52\0\1\126"+
    "\37\0\1\127\1\0\1\130\6\0\1\131\26\0\1\132"+
    "\65\0\1\133\25\0\1\134\17\0\1\135\1\136\41\0"+
    "\1\137\40\0\1\140\51\0\1\141\54\0\1\142\43\0"+
    "\1\143\46\0\1\144\52\0\1\145\1\146\33\0\1\147"+
    "\66\0\1\55\32\0\1\150\61\0\1\123\34\0\1\123"+
    "\54\0\1\122\36\0\1\151\36\0\1\152\53\0\1\153"+
    "\43\0\1\154\54\0\1\155\5\0\1\156\1\0\1\55"+
    "\37\0\1\123\33\0\1\157\74\0\1\160\43\0\1\161"+
    "\41\0\1\162\37\0\1\163\41\0\1\132\56\0\1\164"+
    "\5\0\1\165\31\0\1\166\37\0\1\167\34\0\1\167"+
    "\4\40\1\41\4\40\1\170\35\40\20\0\1\171\52\0"+
    "\1\172\51\0\1\173\35\0\1\174\70\0\1\175\44\0"+
    "\1\176\41\0\1\177\31\0\1\200\46\0\1\201\3\0"+
    "\1\202\52\0\1\203\42\0\1\157\61\0\1\55\51\0"+
    "\1\204\46\0\1\161\30\0\1\205\56\0\1\55\56\0"+
    "\1\137\26\0\1\206\46\0\1\207\11\0\1\55\45\0"+
    "\1\55\41\0\1\204\51\0\1\55\37\0\1\147\56\0"+
    "\1\210\36\0\1\211\46\0\1\212\52\0\1\213\51\0"+
    "\1\162\56\0\1\202\27\0\1\214\46\0\1\55\62\0"+
    "\1\215\52\0\1\216\24\0\1\217\65\0\1\162\22\0"+
    "\1\167\33\0\1\116\1\167\4\40\1\41\4\40\1\220"+
    "\35\40\35\0\1\55\42\0\1\160\35\0\1\221\42\0"+
    "\1\222\62\0\1\147\55\0\1\223\46\0\1\123\46\0"+
    "\1\162\24\0\1\224\61\0\1\213\55\0\1\55\33\0"+
    "\1\225\57\0\1\204\33\0\1\226\40\0\1\227\67\0"+
    "\1\230\27\0\1\204\44\0\1\231\72\0\1\162\26\0"+
    "\1\232\51\0\1\233\23\0\4\40\1\41\2\40\1\234"+
    "\37\40\14\0\1\235\51\0\1\162\64\0\1\236\25\0"+
    "\1\237\54\0\1\147\44\0\1\240\63\0\1\73\31\0"+
    "\1\241\55\0\1\202\55\0\1\55\24\0\1\240\32\0"+
    "\4\40\1\41\4\40\1\242\35\40\31\0\1\202\31\0"+
    "\1\243\70\0\1\162\45\0\1\202\42\0\1\244\15\0"+
    "\4\40\1\41\4\40\1\245\35\40\24\0\1\246\40\0"+
    "\1\216\30\0\4\40\1\41\2\40\1\247\37\40\31\0"+
    "\1\204\15\0\4\40\1\41\4\40\1\250\41\40\1\41"+
    "\4\40\1\251\41\40\1\252\42\40";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6162];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\31\1\1\0\1\11\1\0"+
    "\1\1\1\0\1\11\3\0\1\1\3\0\1\11\23\0"+
    "\1\1\16\0\1\1\1\0\2\11\43\0\1\1\12\0"+
    "\1\11\11\0\1\11\35\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private java.io.Reader zzReader;
  private int zzState;
  private int zzLexicalState = YYINITIAL;
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];
  private int zzMarkedPos;
  private int zzCurrentPos;
  private int zzStartRead;
  private int zzEndRead;
  private boolean zzAtEOF;

  private int zzFinalHighSurrogate = 0;

  @SuppressWarnings("unused")
  private int yyline;
  @SuppressWarnings("unused")
  private int yycolumn;
  @SuppressWarnings("unused")
  private long yychar;
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  public static final String COLOR_NARANJA = "#FFA500";
  public static final String COLOR_MORADO = "#800080";
  public static final String COLOR_AZUL = "#0000FF";
  public static final String COLOR_AMARILLO = "#FFFF00";
  public static final String COLOR_VERDE = "#008000";
  public static final String COLOR_FUCSIA = "#FF00FF";
  public static final String COLOR_GRIS = "#808080";
  public static final String COLOR_NEGRO = "#000000";

  private List<Token> tokens = new ArrayList<>();

  private void addToken(String text, String type, String color) {
     
      tokens.add(new Token(text, type, color));
       
   //   System.out.println("Token: " + text + " | Tipo: " + type + " | Color: " + color);
                   
  }

  public List<Token> getTokens() {
      return tokens;
  }
  
public String getTokenTextsAsString() {
    StringBuilder tokenTexts = new StringBuilder();
    for (Token token : tokens) {
        tokenTexts.append(token.getText()).append(" "); // Concatenar el texto con un salto de l√≠nea
    }
    return tokenTexts.toString();
}

// Nuevo m√©todo que devuelve los colores de los tokens concatenados
public String getTokenColorsAsString() {
    StringBuilder tokenColors = new StringBuilder();
    for (Token token : tokens) {
        tokenColors.append(token.getColor()).append(" "); // Concatenar el color de cada token con un espacio
    }
    return tokenColors.toString();
}


    
  SQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  private boolean zzCanGrow() {
    return true;
  }

  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  private boolean zzRefill() throws java.io.IOException {

    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      return false;
    }
    return true;
  }



  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  public final boolean yyatEOF() {
    return zzAtEOF;
  }

  public final int yystate() {
    return zzLexicalState;
  }

  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }

  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }

  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }

  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }
  
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
        zzMarkedPosL = zzMarkedPos;
        zzAction = -1;
        zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
        zzState = ZZ_LEXSTATE[zzLexicalState];
        int zzAttributes = zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
        }

        zzForAction: {
            while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                    zzCurrentPosL += Character.charCount(zzInput);
                } else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                } else {
                    zzCurrentPos = zzCurrentPosL;
                    zzMarkedPos = zzMarkedPosL;
                    boolean eof = zzRefill();
                    zzCurrentPosL = zzCurrentPos;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    zzEndReadL = zzEndRead;
                    if (eof) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                }
                int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                if (zzNext == -1) break zzForAction;
                zzState = zzNext;

                zzAttributes = zzAttrL[zzState];
                if ((zzAttributes & 1) == 1) {
                    zzAction = zzState;
                    zzMarkedPosL = zzCurrentPosL;
                    if ((zzAttributes & 8) == 8) break zzForAction;
                }
            }
        }

        zzMarkedPos = zzMarkedPosL;

        if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null; // Si llegamos al final del archivo, retorna null
        } else {
            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                    System.err.println("S√≠mbolo no reconocido: " + yytext());
                    return new Token(yytext(), "Error", "#FF0000"); // Token de error
                case 2:
                    // Ignorar espacios en blanco
                    break;
                case 3:
                    return new Token(yytext(), "Signo", "#000000"); // Signo negro
                case 4:
                    return new Token(yytext(), "Operador Aritm√©tico", "#000000"); // Operador negro
                case 5:
                    return new Token(yytext(), "Entero", "#0000FF"); // Entero azul
                case 6:
                    return new Token(yytext(), "Operador Relacional", "#000000"); // Operador negro
                case 7:
                    return new Token(yytext(), "Identificador", "#FF00FF"); // Identificador fucsia
                case 8:
                    return new Token(yytext(), "Cadena", "#00FF00"); // Cadena verde
                case 9:
                    return new Token(yytext(), "Comentario", "#808080"); // Comentario gris
                case 10:
                    return new Token(yytext(), "CREATE", "#FFA500"); // CREATE naranja
                case 11:
                    return new Token(yytext(), "Operador L√≥gico", "#FFA500"); // Operador l√≥gico naranja
                case 12:
                    return new Token(yytext(), "Decimal", "#0000FF"); // Decimal azul
                case 13:
                    return new Token(yytext(), "Funci√≥n de Agregaci√≥n", "#0000FF"); // Funci√≥n de agregaci√≥n azul
                case 14:
                    return new Token(yytext(), "Tipo de Dato", "#800080"); // Tipo de dato morado
                case 15:
                    return new Token(yytext(), "Booleano", "#0000FF"); // Booleano azul
                case 16:
                    return new Token(yytext(), "Fecha", "#FFFF00"); // Fecha amarillo
                default:
                    zzScanError(ZZ_NO_MATCH);
            }
        }
    }
  }
}
